name: "ZF-Ft"
input: "data"
input_shape {
  dim: 1
  dim: 2        #<-- gray 
  dim: 128
  dim: 128
}
#========= conv1-conv5 ============
layer {
	name: "conv1"
	type: "Convolution"
	bottom: "data"
	top: "conv1"
    #param { lr_mult: 0 decay_mult: 0 }
    #param { lr_mult: 0 decay_mult: 0 }
    param { lr_mult: 1.0 }
	param { lr_mult: 2.0 }	
    convolution_param {
		num_output: 96
		kernel_size: 7
		pad: 3
		stride: 2
	}
}
layer {
	name: "relu1"
	type: "ReLU"
	bottom: "conv1"
	top: "conv1"
}
layer {
	name: "norm1"
	type: "LRN"
	bottom: "conv1"
	top: "norm1"
	lrn_param {
		local_size: 3
		alpha: 0.00005
		beta: 0.75
		norm_region: WITHIN_CHANNEL
	}
}
layer {
	name: "pool1"
	type: "Pooling"
	bottom: "norm1"
	top: "pool1"
	pooling_param {
		kernel_size: 3
		stride: 2
		pad: 1
		pool: MAX
	}
}
layer {
	name: "conv2"
	type: "Convolution"
	bottom: "pool1"
	top: "conv2"
    #param { lr_mult: 0 decay_mult: 0 }
    #param { lr_mult: 0 decay_mult: 0 }
    param { lr_mult: 1.0 }
	param { lr_mult: 2.0 }	
    convolution_param {
		num_output: 256
		kernel_size: 5
		pad: 2
		stride: 2
	}
}
layer {
	name: "relu2"
	type: "ReLU"
	bottom: "conv2"
	top: "conv2"
}
layer {
	name: "norm2"
	type: "LRN"
	bottom: "conv2"
	top: "norm2"
	lrn_param {
		local_size: 3
		alpha: 0.00005
		beta: 0.75
		norm_region: WITHIN_CHANNEL
	}
}
layer {
	name: "pool2"
	type: "Pooling"
	bottom: "norm2"
	top: "pool2"
	pooling_param {
		kernel_size: 3
		stride: 2
		pad: 1
		pool: MAX
	}
}
layer {
	name: "conv3"
	type: "Convolution"
	bottom: "pool2"
	top: "conv3"
    #param { lr_mult: 0 decay_mult: 0 }
    #param { lr_mult: 0 decay_mult: 0 }
    param { lr_mult: 1.0 }
	param { lr_mult: 2.0 }	
	convolution_param {
		num_output: 384
		kernel_size: 3
		pad: 1
		stride: 1
	}
}
layer {
	name: "relu3"
	type: "ReLU"
	bottom: "conv3"
	top: "conv3"
}
layer {
	name: "conv4"
	type: "Convolution"
	bottom: "conv3"
	top: "conv4"
    #param { lr_mult: 0 decay_mult: 0 }
    #param { lr_mult: 0 decay_mult: 0 }
    param { lr_mult: 1.0 }
	param { lr_mult: 2.0 }	
	convolution_param {
		num_output: 384
		kernel_size: 3
		pad: 1
		stride: 1
	}
}
layer {
	name: "relu4"
	type: "ReLU"
	bottom: "conv4"
	top: "conv4"
}
layer {
	name: "conv5"
	type: "Convolution"
	bottom: "conv4"
	top: "conv5"
    #param { lr_mult: 0 decay_mult: 0 }
    #param { lr_mult: 0 decay_mult: 0 }
    param { lr_mult: 1.0 }
	param { lr_mult: 2.0 }	
	convolution_param {
		num_output: 256
		kernel_size: 3
		pad: 1
		stride: 1
	}
}
layer {
	name: "relu5"
	type: "ReLU"
	bottom: "conv5"
	top: "conv5"
}

#========= filter ============
#layer {
#  name: "ft/conv1"
#  type: "Convolution"
#  bottom: "conv5"
#  top: "ft/conv1"
#  #propagate_down: 0             # using old data
#  param { lr_mult: 1.0 }
#  param { lr_mult: 2.0 }
#  convolution_param {
#    num_output: 128
#    kernel_size: 3 pad: 1 stride: 2
#    weight_filler { type: "gaussian" std: 0.01 }
#    bias_filler { type: "constant" value: 0 }
#  }
#}
#layer {
#  name: "ft/relu1"
#  type: "ReLU"
#  bottom: "ft/conv1"
#  top: "ft/conv1"
#}

layer {
  name: "ft/fc1"
  type: "InnerProduct"
  bottom: "conv5"
  top: "ft/fc1"
  param { lr_mult: 1.0 }
  param { lr_mult: 2.0 }
  inner_product_param {
    num_output: 512
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
  name: "ft/relu1"
  type: "ReLU"
  bottom: "ft/fc1"
  top: "ft/fc1"
}
layer {
  name: "ft/drop1"
  type: "Dropout"
  bottom: "ft/fc1"
  top: "ft/fc1"
  dropout_param {
    dropout_ratio: 0.5
    scale_train: false
  }
}

layer {
  name: "ft/fc2"
  type: "InnerProduct"
  bottom: "ft/fc1"
  top: "ft/fc2"
  param { lr_mult: 1.0 }
  param { lr_mult: 2.0 }
  inner_product_param {
    num_output: 512
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
  name: "ft/relu2"
  type: "ReLU"
  bottom: "ft/fc2"
  top: "ft/fc2"
}
layer {
  name: "ft/drop2"
  type: "Dropout"
  bottom: "ft/fc2"
  top: "ft/fc2"
  dropout_param {
    dropout_ratio: 0.5
    scale_train: false
  }
}


#layer {
#  name: 'dbg'
#  type: 'Python'
#  bottom: 'ft/fc2'
#  top: 'ft/fc2'
#  python_param {
#    module: 'sarpoint.cnn.dbg_layer'
#    layer: 'CheckFiniteLayer'
#    param_str: 'ft/fc2'
#  }
#}

layer {
  name: "cls_score"
  type: "InnerProduct"
  bottom: "ft/fc2"
  top: "cls_score"
  param { lr_mult: 1.0 }
  param { lr_mult: 2.0 }
  inner_product_param {
    num_output: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

layer {
  name: "cls_prob"
  type: "Softmax"
  bottom: "cls_score"
  top: "cls_prob"
}
