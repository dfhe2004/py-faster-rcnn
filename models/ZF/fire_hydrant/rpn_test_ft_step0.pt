name: "ZF"

input: "data"
input_shape {
  dim: 1
  dim: 2        #<-- gray 
  dim: 128
  dim: 128
}

input: "im_info"
input_shape {
  dim: 1
  dim: 3
}

# ------------------------ layer 1 -----------------------------
layer {
    name: "conv1"
    type: "Convolution"
    bottom: "data"
    top: "conv1"
    #param { lr_mult: 0 decay_mult: 0 }
    #param { lr_mult: 0 decay_mult: 0 }
    param { lr_mult: 1.0 }
	#param { lr_mult: 2.0 }	
    convolution_param {
		num_output: 96
		kernel_size: 7
		pad: 3
		stride: 2               #<-- change from 2 to 1
        bias_term: false
        weight_filler { type: "gaussian" std: 0.01 }
        #bias_filler { type: "constant" value: 0 }
	}
}
layer {
  name: "conv1_bn"
  bottom: "conv1"
  top: "conv1"
  type: "BatchNorm"
  param { lr_mult: 0 decay_mult: 0 }
  param { lr_mult: 0 decay_mult: 0 }
  param { lr_mult: 0 decay_mult: 0 }
}
layer {
  name: "conv1_bn/scale"
  bottom: "conv1"
  top: "conv1"
  type: "Scale"
  scale_param{
    #axis: 1
    bias_term: true
  }
}
layer {
	name: "relu1"
	type: "ReLU"
	bottom: "conv1"
	top: "conv1"
}
layer {
	name: "pool1"
	type: "Pooling"
	bottom: "conv1"
	top: "pool1"
	pooling_param {
		kernel_size: 3
		stride: 2
		pad: 1
		pool: MAX
	}
}

layer {
	name: "conv2"
	type: "Convolution"
	bottom: "pool1"
	top: "conv2"
    #param { lr_mult: 0 decay_mult: 0 }
    #param { lr_mult: 0 decay_mult: 0 }
    param { lr_mult: 1.0 }
	#param { lr_mult: 2.0 }	
    convolution_param {
		num_output: 256
		kernel_size: 5
		pad: 2
		stride: 2
        bias_term: false
        weight_filler { type: "gaussian" std: 0.01 }
        #bias_filler { type: "constant" value: 0 }
	}
}
layer {
  name: "conv2_bn"
  bottom: "conv2"
  top: "conv2"
  type: "BatchNorm"
  param { lr_mult: 0 decay_mult: 0 }
  param { lr_mult: 0 decay_mult: 0 }
  param { lr_mult: 0 decay_mult: 0 }
}
layer {
  name: "conv2_bn/scale"
  bottom: "conv2"
  top: "conv2"
  type: "Scale"
  scale_param{
    #axis: 1
    bias_term: true
  }
}
layer {
	name: "relu2"
	type: "ReLU"
	bottom: "conv2"
	top: "conv2"
}
layer {
	name: "pool2"
	type: "Pooling"
	bottom: "conv2"
	top: "pool2"
	pooling_param {
		kernel_size: 3
		stride: 2
		pad: 1
		pool: MAX
	}
}
layer {
	name: "conv3"
	type: "Convolution"
	bottom: "pool2"
	top: "conv3"
    #param { lr_mult: 0 decay_mult: 0 }
    #param { lr_mult: 0 decay_mult: 0 }
    param { lr_mult: 1.0 }
	#param { lr_mult: 2.0 }	
	convolution_param {
		num_output: 384
		kernel_size: 3
		pad: 1
		stride: 1
        bias_term: false
        weight_filler { type: "gaussian" std: 0.01 }
        #bias_filler { type: "constant" value: 0 }
	}
}
layer {
  name: "conv3_bn"
  bottom: "conv3"
  top: "conv3"
  type: "BatchNorm"
  param { lr_mult: 0 decay_mult: 0 }
  param { lr_mult: 0 decay_mult: 0 }
  param { lr_mult: 0 decay_mult: 0 }
}
layer {
  name: "conv3_bn/scale"
  bottom: "conv3"
  top: "conv3"
  type: "Scale"
  scale_param{
    #axis: 1
    bias_term: true
  }
}
layer {
	name: "relu3"
	type: "ReLU"
	bottom: "conv3"
	top: "conv3"
}
layer {
	name: "conv4"
	type: "Convolution"
	bottom: "conv3"
	top: "conv4"
    #param { lr_mult: 0 decay_mult: 0 }
    #param { lr_mult: 0 decay_mult: 0 }
    param { lr_mult: 1.0 }
	#param { lr_mult: 2.0 }	
	convolution_param {
		num_output: 384
		kernel_size: 3
		pad: 1
		stride: 1
        bias_term: false
        weight_filler { type: "gaussian" std: 0.01 }
        #bias_filler { type: "constant" value: 0 }
	}
}
layer {
  name: "conv4_bn"
  bottom: "conv4"
  top: "conv4"
  type: "BatchNorm"
  param { lr_mult: 0 decay_mult: 0 }
  param { lr_mult: 0 decay_mult: 0 }
  param { lr_mult: 0 decay_mult: 0 }
}
layer {
  name: "conv4_bn/scale"
  bottom: "conv4"
  top: "conv4"
  type: "Scale"
  scale_param{
    #axis: 1
    bias_term: true
  }
}
layer {
	name: "relu4"
	type: "ReLU"
	bottom: "conv4"
	top: "conv4"
}
layer {
	name: "conv5"
	type: "Convolution"
	bottom: "conv4"
	top: "conv5"
    #param { lr_mult: 0 decay_mult: 0 }
    #param { lr_mult: 0 decay_mult: 0 }
    param { lr_mult: 1.0 }
	#param { lr_mult: 2.0 }	
	convolution_param {
		num_output: 256
		kernel_size: 3
		pad: 1
		stride: 1
        bias_term: false
        weight_filler { type: "gaussian" std: 0.01 }
        #bias_filler { type: "constant" value: 0 }
	}
}
layer {
  name: "conv5_bn"
  bottom: "conv5"
  top: "conv5"
  type: "BatchNorm"
  param { lr_mult: 0 decay_mult: 0 }
  param { lr_mult: 0 decay_mult: 0 }
  param { lr_mult: 0 decay_mult: 0 }
}
layer {
  name: "conv5_bn/scale"
  bottom: "conv5"
  top: "conv5"
  type: "Scale"
  scale_param{
    #axis: 1
    bias_term: true
  }
}
layer {
	name: "relu5"
	type: "ReLU"
	bottom: "conv5"
	top: "conv5"
}

#-----------------------layer +-------------------------

layer {
  name: "rpn_conv1"
  type: "Convolution"
  bottom: "conv5"
  top: "rpn_conv1"
  convolution_param {
    num_output: 256
    kernel_size: 3 pad: 1 stride: 1
  }
}
layer {
  name: "rpn_relu1"
  type: "ReLU"
  bottom: "rpn_conv1"
  top: "rpn_conv1"
}
layer {
  name: "rpn_cls_score"
  type: "Convolution"
  bottom: "rpn_conv1"
  top: "rpn_cls_score"
  convolution_param {
    num_output: 6   # 2(bg/fg) * 3*1(anchors)
    kernel_size: 1 pad: 0 stride: 1
  }
}
layer {
  name: "rpn_bbox_pred"
  type: "Convolution"
  bottom: "rpn_conv1"
  top: "rpn_bbox_pred"
  convolution_param {
    num_output: 12   # 4 * 3*1(anchors)
    kernel_size: 1 pad: 0 stride: 1
  }
}
layer {
   bottom: "rpn_cls_score"
   top: "rpn_cls_score_reshape"
   name: "rpn_cls_score_reshape"
   type: "Reshape"
   reshape_param { shape { dim: 0 dim: 2 dim: -1 dim: 0 } } #(b, 2, A*h, w)
}

#-----------------------output------------------------
layer {
  name: "rpn_cls_prob"
  type: "Softmax"
  bottom: "rpn_cls_score_reshape"
  top: "rpn_cls_prob"
}
layer {
  name: 'rpn_cls_prob_reshape'
  type: 'Reshape'
  bottom: 'rpn_cls_prob'            # (b,   2, A*h, w)
  top: 'rpn_cls_prob_reshape'       # (b, 2*A,   h, w)
  reshape_param { shape { dim: 0 dim: 6 dim: -1 dim: 0 } } 
}
layer {
  name: 'proposal'
  type: 'Python'
  bottom: 'rpn_cls_prob_reshape'
  bottom: 'rpn_bbox_pred'
  bottom: 'im_info'
  top: 'rois'
  top: 'scores'
  python_param {
    module: 'sarpoint.cnn.proposal_layer'
    layer: 'ProposalLayer'
    #param_str: '{"feat_stride": 16,"anchor_size":32, "anchor_ratios":[0.75,1,1.33], "anchor_scales": [0.75,1,1.4,2],"margin":0.12 }'
    param_str: '{"feat_stride": 16,"anchor_size": 16, "anchor_ratios":[1, 1.5, 3.0], "anchor_scales": [2.5] }'

  }
}
