name: "ZF-Ft"
layer {
  name: 'input-data'
  type: 'Python'
  top: 'data'
  top: 'labels'
  python_param {
    module: 'sarpoint.cnn.roi_data_layer'
    layer: 'FtRoiDataLayer'
    param_str: '{"num_classes": 2, "im_size":[2,128,128] }'
  }
}

#========= conv1-conv5 ============
layer {
    name: "conv1"
    type: "Convolution"
    bottom: "data"
    top: "conv1"
    #param { lr_mult: 0 decay_mult: 0 }
    #param { lr_mult: 0 decay_mult: 0 }
    param { lr_mult: 1.0 }
	#param { lr_mult: 2.0 }	
    convolution_param {
		num_output: 96
		kernel_size: 7
		pad: 3
		stride: 2               #<-- change from 2 to 1
        bias_term: false
        weight_filler { type: "gaussian" std: 0.01 }
        #bias_filler { type: "constant" value: 0 }
	}
}
layer {
  name: "conv1_bn"
  bottom: "conv1"
  top: "conv1"
  type: "BatchNorm"
  param { lr_mult: 0 decay_mult: 0 }
  param { lr_mult: 0 decay_mult: 0 }
  param { lr_mult: 0 decay_mult: 0 }
}
layer {
  name: "conv1_bn/scale"
  bottom: "conv1"
  top: "conv1"
  type: "Scale"
  scale_param{
    #axis: 1
    bias_term: true
  }
}
layer {
	name: "relu1"
	type: "ReLU"
	bottom: "conv1"
	top: "conv1"
}
layer {
	name: "pool1"
	type: "Pooling"
	bottom: "conv1"
	top: "pool1"
	pooling_param {
		kernel_size: 3
		stride: 2
		#pad: 1
		pool: MAX
	}
}

layer {
	name: "conv2"
	type: "Convolution"
	bottom: "pool1"
	top: "conv2"
    #param { lr_mult: 0 decay_mult: 0 }
    #param { lr_mult: 0 decay_mult: 0 }
    param { lr_mult: 1.0 }
	#param { lr_mult: 2.0 }	
    convolution_param {
		num_output: 256
		kernel_size: 5
		pad: 2
		stride: 2
        bias_term: false
        weight_filler { type: "gaussian" std: 0.01 }
        #bias_filler { type: "constant" value: 0 }
	}
}
layer {
  name: "conv2_bn"
  bottom: "conv2"
  top: "conv2"
  type: "BatchNorm"
  param { lr_mult: 0 decay_mult: 0 }
  param { lr_mult: 0 decay_mult: 0 }
  param { lr_mult: 0 decay_mult: 0 }
}
layer {
  name: "conv2_bn/scale"
  bottom: "conv2"
  top: "conv2"
  type: "Scale"
  scale_param{
    #axis: 1
    bias_term: true
  }
}
layer {
	name: "relu2"
	type: "ReLU"
	bottom: "conv2"
	top: "conv2"
}
layer {
	name: "pool2"
	type: "Pooling"
	bottom: "conv2"
	top: "pool2"
	pooling_param {
		kernel_size: 3
		stride: 2
		#pad: 1
		pool: MAX
	}
}
layer {
	name: "conv3"
	type: "Convolution"
	bottom: "pool2"
	top: "conv3"
    #param { lr_mult: 0 decay_mult: 0 }
    #param { lr_mult: 0 decay_mult: 0 }
    param { lr_mult: 1.0 }
	#param { lr_mult: 2.0 }	
	convolution_param {
		num_output: 384
		kernel_size: 3
		pad: 1
		stride: 1
        bias_term: false
        weight_filler { type: "gaussian" std: 0.01 }
        #bias_filler { type: "constant" value: 0 }
	}
}
layer {
  name: "conv3_bn"
  bottom: "conv3"
  top: "conv3"
  type: "BatchNorm"
  param { lr_mult: 0 decay_mult: 0 }
  param { lr_mult: 0 decay_mult: 0 }
  param { lr_mult: 0 decay_mult: 0 }
}
layer {
  name: "conv3_bn/scale"
  bottom: "conv3"
  top: "conv3"
  type: "Scale"
  scale_param{
    #axis: 1
    bias_term: true
  }
}
layer {
	name: "relu3"
	type: "ReLU"
	bottom: "conv3"
	top: "conv3"
}
layer {
	name: "conv4"
	type: "Convolution"
	bottom: "conv3"
	top: "conv4"
    #param { lr_mult: 0 decay_mult: 0 }
    #param { lr_mult: 0 decay_mult: 0 }
    param { lr_mult: 1.0 }
	#param { lr_mult: 2.0 }	
	convolution_param {
		num_output: 384
		kernel_size: 3
		pad: 1
		stride: 1
        bias_term: false
        weight_filler { type: "gaussian" std: 0.01 }
        #bias_filler { type: "constant" value: 0 }
	}
}
layer {
  name: "conv4_bn"
  bottom: "conv4"
  top: "conv4"
  type: "BatchNorm"
  param { lr_mult: 0 decay_mult: 0 }
  param { lr_mult: 0 decay_mult: 0 }
  param { lr_mult: 0 decay_mult: 0 }
}
layer {
  name: "conv4_bn/scale"
  bottom: "conv4"
  top: "conv4"
  type: "Scale"
  scale_param{
    #axis: 1
    bias_term: true
  }
}
layer {
	name: "relu4"
	type: "ReLU"
	bottom: "conv4"
	top: "conv4"
}
layer {
	name: "conv5"
	type: "Convolution"
	bottom: "conv4"
	top: "conv5"
    #param { lr_mult: 0 decay_mult: 0 }
    #param { lr_mult: 0 decay_mult: 0 }
    param { lr_mult: 1.0 }
	#param { lr_mult: 2.0 }	
	convolution_param {
		num_output: 64
		kernel_size: 3
		pad: 1
		stride: 1
        bias_term: false
        weight_filler { type: "gaussian" std: 0.01 }
        #bias_filler { type: "constant" value: 0 }
	}
}
layer {
  name: "conv5_bn"
  bottom: "conv5"
  top: "conv5"
  type: "BatchNorm"
  param { lr_mult: 0 decay_mult: 0 }
  param { lr_mult: 0 decay_mult: 0 }
  param { lr_mult: 0 decay_mult: 0 }
}
layer {
  name: "conv5_bn/scale"
  bottom: "conv5"
  top: "conv5"
  type: "Scale"
  scale_param{
    #axis: 1
    bias_term: true
  }
}
layer {
	name: "relu5"
	type: "ReLU"
	bottom: "conv5"
	top: "conv5"
}



#========= filter ============
#layer {
#  name: 'dbg'
#  type: 'Python'
#  bottom: 'ft/fc2'
#  top: 'ft/fc2'
#  python_param {
#    module: 'sarpoint.cnn.dbg_layer'
#    layer: 'CheckFiniteLayer'
#    param_str: 'ft/fc2'
#  }
#}

layer {
  name: "cls_score"
  type: "InnerProduct"
  bottom: "conv5"
  top: "cls_score"
  param { lr_mult: 1.0 }
  param { lr_mult: 2.0 }
  inner_product_param {
    num_output: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

layer {
  name: "loss_cls"
  type: "SoftmaxWithLoss"
  bottom: "cls_score"
  bottom: "labels"
  propagate_down: 1
  propagate_down: 0
  top: "cls_loss"
  loss_weight: 1
  loss_param {
    ignore_label: -1
    normalize: true
  }
}
